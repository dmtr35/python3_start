#!/bin/python3

# abs() возвращает абсолютное значение числа (модуль). 
# Это значит, что она убирает знак "минус" у отрицательных чисел, а положительные числа оставляет без изменений.

# print(abs(-5))                        # Вывод: 5
# print(abs(3.14))                      # Вывод: 3.14
# print(abs(-10.5))                     # Вывод: 10.5
# print(abs(3+4j))                      # Вывод: 5.0 (модуль комплексного числа sqrt(3² + 4²))

# numbers = [-10, 5, -3.14, 0, 7.5]
# abs_numbers = [abs(num) for num in numbers]
# print(abs_numbers)
# ====================================================================================

# all() возвращает True, если все элементы итерируемого объекта
# (например, списка, кортежа) являются истинными (или если объект пустой)

# print(all([True, True, True]))          # Вывод: True
# print(all([True, False, True]))         # Вывод: False
# print(all([]))                          # Вывод: True (пустой итерируемый объект)
# print(all([1, 2, 3]))                   # Вывод: True (ненулевые числа — истинные)
# print(all([0, 1, 2]))                   # Вывод: False (0 — ложное значение)

# ====================================================================================

# any() возвращает True, если хотя бы один элемент итерируемого объекта истинный

# print(any([False, False, True]))            # Вывод: True
# print(any([False, False, False]))           # Вывод: False
# print(any([]))                              # Вывод: False
# print(any([0, 0, 1]))                       # Вывод: True
# ====================================================================================

# bin() Преобразует целое число в строку, представляющую его в двоичной системе счисления (с префиксом 0b).

# print(bin(10))   # Вывод: 0b1010
# print(bin(-5))   # Вывод: -0b101
# print(bin(0))    # Вывод: 0b0
# ====================================================================================

# bool() возвращает булево значение (True или False) для переданного объекта

# print(bool(1))          # Вывод: True (ненулевые числа — истинные)
# print(bool(0))          # Вывод: False
# print(bool("hello"))    # Вывод: True (непустая строка — истинная)
# print(bool(""))         # Вывод: False
# print(bool([1, 2]))     # Вывод: True (непустой список — истинный)
# print(bool([]))         # Вывод: False
# print(bool(None))       # Вывод: False
# print(bool())           # Вывод: False (без аргумента)
# ====================================================================================

# Функция bytearray() создает изменяемый объект типа bytearray, представляющий массив байтов (целых чисел в диапазоне 0–255). 
#  Это полезно для работы с двоичными данными или строками, которые нужно изменять.

# # Создание bytearray из строки
# ba = bytearray("hello", "utf-8")
# print(ba)  # Вывод: bytearray(b'hello')

# # Создание bytearray из числа (размер массива)
# ba = bytearray(3)  # Создает массив из 3 нулевых байтов
# print(ba)  # Вывод: bytearray(b'\x00\x00\x00')

# # Создание bytearray из списка чисел
# ba = bytearray([65, 66, 67])
# print(ba)  # Вывод: bytearray(b'ABC')

# # Изменение bytearray
# ba[0] = 68  # Меняем первый байт на 'D'
# print(ba)  # Вывод: bytearray(b'DBC')
# ====================================================================================

# Функция callable() возвращает True, если объект можно вызвать (как функцию, метод или класс), и False в противном случае.
# Даже если callable() возвращает True, вызов объекта может завершиться ошибкой.

# def my_function():
#     pass

# class MyClass:
#     def __call__(self):
#         pass

# print(callable(my_function))    # Вывод: True
# print(callable(MyClass))        # Вывод: True (классы вызываемы)
# print(callable(MyClass()))      # Вывод: True (экземпляр с методом __call__)
# print(callable(42))             # Вывод: False
# print(callable(str))            # Вывод: True (встроенные типы, как str, вызываемы)

# ====================================================================================

# Функция chr() возвращает строку длиной в один символ, соответствующий целому числу (ASCII-коду) в диапазоне 0–255.

# print(chr(65))   # Вывод: A
# print(chr(97))   # Вывод: a
# print(chr(33))   # Вывод: !
# print(chr(256)) # Ошибка: ValueError (вне диапазона)

# ====================================================================================

# Функция classmethod() преобразует обычную функцию в метод класса, который получает класс (а не экземпляр)
# как первый аргумент (обычно называется cls). Используется как декоратор.

# class MyClass:
#     class_variable = "I am a class variable"

#     @classmethod
#     def class_method(cls):
#         return f"This is {cls.class_variable}"

# print(MyClass.class_method())  # Вывод: This is I am a class variable

# Задание 1 и 2
class Person:
    species = "Homo sapiens"

    @classmethod
    def get_species(cls):
        return cls.species

    @classmethod
    def create_person(cls, name):
        return cls(name)

    def __init__(self, name):
        self.name = name

# Проверка
print(Person.get_species())  # Вывод: Homo sapiens
person = Person.create_person("Alice")
print(person.name)  # Вывод: Alice
# ====================================================================================

